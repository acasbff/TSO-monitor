---
title: "<span class='dashboard-title'>TSO monitor</span>"
editor_options: 
  chunk_output_type: console
---
```{r setup, include=FALSE}
### quarto publish gh-pages --no-prompt --server https://acasbff.github.io/TSO-monitor/
### or  git add . && git commit -m "Update message" && git push origin main
library(googledrive)
library(googlesheets4)
library(tidyverse)
library(gt)
library(htmltools)
library(reactable)
library(reactablefmtr)


# Authentication handling
if (Sys.getenv("GITHUB_ACTIONS") == "true") {
  # Running in GitHub Actions
  options(gargle_quiet = TRUE)
  gs4_deauth()  # First deauthorize
  
  # Authenticate using service account
  tryCatch({
    gs4_auth(path = "gs-creds.json")
    print("Successfully authenticated with Google Sheets!")
  }, error = function(e) {
    stop("Failed to authenticate with Google Sheets: ", e$message)
  })
} else {
  # Local development
  gs4_auth(email = "ana.afonso.silva@bff.earth")  # Will prompt for interactive authentication
}

# Sheet URL
sheet_url <- "https://docs.google.com/spreadsheets/d/1wUMj9zsxa-eFd8F_XLyCbE7ZMsENwgH1cNq_0tXUHO0/edit?gid=0#gid=0"

# Read data with error handling
tryCatch({
    # Read color coding sheet
  tab_colors <- read_sheet(
    sheet_url, 
    sheet = 'Color coding', 
    range = "A1:E31" ## still needs to be added the info for 2 columns
  )
  
  # Read Governance sheet
  tab1_data0 <- read_sheet(
    sheet_url, 
    sheet = 'Governance', 
    range = "A1:I33"
  )
  
    # Read footnotes to add under Governance sheet
  tab1_foot <- read_sheet(
    sheet_url, 
    sheet = 'Governance', 
    range = "A1:I35",
    col_names = TRUE
  ) %>% filter(Country %in% 'Footnote')

  # Read Politics sheet
  tab2_data0 <- read_sheet(
    sheet_url, 
    sheet = 'Politics', 
    range = "A1:N33"
  )
  
  # Read sheet with detail for CRM
    tab2_CRM <- read_sheet(
    sheet_url, 
    sheet = 'Detail on CRM', 
    range = "A1:D33"
  )
}, error = function(e) {
  stop("Error reading Google Sheets: ", e$message)
})

tab1_data <- tab1_data0 %>%
    group_by(Country) %>%
    mutate(row_id = row_number()) %>%
    ungroup() %>%
    # Create all needed columns in one mutate
    mutate(
        unbundling_clean = gsub("\\*+$", "", `Unbundling model`),
        year = as.numeric(gsub("[^0-9]", "", `Government net zero climate target`)),
        netZero_cols = case_when(
            `Government net zero climate target` == "No target" ~ 
                filter(tab_colors, Header == "Government net zero climate target" & Category == "No target")$Color,
            !is.na(year) & year <= 2040 ~ 
                filter(tab_colors, Header == "Government net zero climate target" & Category == "2040below")$Color,
            !is.na(year) & year > 2040 ~ 
                filter(tab_colors, Header == "Government net zero climate target" & Category == "2040higher")$Color,
            TRUE ~ "#FFFFFF"
        )
    ) %>%
    # then join the unbundling model color
    left_join(
        tab_colors %>% 
            filter(Header == "Unbundling model") %>%
            select(Category, "unbundling_cols" = Color),
        by = c("unbundling_clean" = "Category")
    ) %>%
    # Clean up temporary columns
    select(-year, -unbundling_clean)


# Process tab2_data with color columns
polCols <- tab_colors %>%
  filter(Tab == 'Politics') %>%
  select(Header, Category, Type, Color)

tab2_data <- tab2_data0 %>%
  group_by(Country) %>%
  mutate(row_id = row_number()) %>%
  ungroup() %>%
  # Add colors for Government aligned with 2035 benchmark
  left_join(
    polCols %>% 
      filter(Header == "Government aligned with 2035 benchmark") %>%
      select(Category, Color) %>%
      rename(
        `Government aligned with 2035 benchmark` = Category,
        benchmark_cols = Color
      ),
    by = "Government aligned with 2035 benchmark"
  ) %>%
  # Add colors for Position on capacity remuneration markets
  left_join(
    polCols %>% 
      filter(Header == "Position on capacity remuneration markets") %>%
      select(Category, Color) %>%
      rename(
        `Position on capacity remuneration markets` = Category,
        crm_cols = Color
      ),
    by = "Position on capacity remuneration markets"
  ) %>%
    # Add colors for Clean Energy Ministerial
    left_join(
    polCols %>% 
      filter(Header == "Clean Energy Ministerial") %>%
      select(Category, Color) %>%
      rename(
        `Clean Energy Ministerial` = Category,
        cem_cols = Color
      ),
    by = "Clean Energy Ministerial"
  )  %>% 
  left_join(
    tab2_CRM %>% select(Country, TSO, "crm_detail" = "Detail on CRM position"),
    by = c("Country", "TSO")
  ) %>%
  separate(
    `Committee chair`,
    into = c("Committee chair", "Chair_Details"),
    sep = " \\| ",  # Adding escape character before |
    fill = "right"  # This keeps rows without the separator
  ) %>% 
  separate(
    `Board member or head of Assembly`,
    into = c("Board member or head of Assembly", "Board_Details"),
    sep = " \\| ",  # Adding escape character before |
    fill = "right"  # This keeps rows without the separator
  )

# create YES/NO color mapping as a list instead of named vector
yn_cols <- filter(tab_colors, Category %in% c('YES', 'NO')) %>% 
  select(Category, Color) %>% 
  distinct() %>% 
  deframe() %>%
  as.list()  # Convert to list to avoid the JSON named vector warning

# CRM color mapping
crm_cols <- filter(tab_colors, Header %in% 'Position on capacity remuneration markets') %>% 
    select(Category, Color) %>% 
    distinct() %>% 
    deframe() %>%
    as.list()
```

```{r, include = FALSE}
### customized functions

color_tiles_custom <- function(data,
                             color_ref = NULL,
                             yes_no = FALSE,
                             height = "30px",
                             box_shadow = FALSE,
                             text_color = "black",
                             line_height = "1.2") {  # Added line_height parameter

  if (!is.logical(box_shadow)) {
    stop("`box_shadow` must be TRUE or FALSE")
  }

  box_shadow <- if (box_shadow) "0 6px 6px -4px #888888" else NULL

  cell <- function(value, index, name) {
    # Get color based on the type
    cell_color <- if (yes_no) {
      # Handle YES/NO values
      if (value %in% names(yn_cols)) {
        yn_cols[[value]]  # Use double brackets for list access
      } else {
        "#FFFFFF"  # Default color if no match
      }
    } else if (!is.null(color_ref) && color_ref %in% names(data)) {
      # Handle color reference column
      data[[color_ref]][index]
    } else {
      "#FFFFFF"  # Default color
    }

    htmltools::div(
      value,
      style = list(
        background = cell_color,
        color = text_color,
        display = "flex",
        flexDirection = "column",
        justifyContent = "center",
        alignItems = "center",
        height = height,
        borderRadius = "6px",
        boxShadow = box_shadow,
        transition = "background 1s ease",
        lineHeight = line_height,    # Added line height control
        padding = "8px",            # Added padding for better text spacing
        textAlign = "center"        # Ensure text is centered
      )
    )
  }

  cell
}


expand_custom <- function(data, 
                          details_col, 
                          color = NULL, 
                          text_color = "black", 
                          font_weight = "normal", 
                          height = "40px", 
                          box_shadow = TRUE, 
                          column_id = NULL) {
  
  if (!is.null(color) && !is.list(color)) {
    stop("`color` must be a named list of colors.")
  }
  
  if (!details_col %in% names(data)) {
    stop(paste("`details_col` must be a valid column in the data. Provided:", details_col))
  }
  
  function(value, index) {
    details_text <- data[[details_col]][index]
    if (is.null(column_id)) {
      stop("`column_id` must be provided to ensure unique class names.")
    }
    column_prefix <- column_id  # Use the provided column ID as the prefix
    
    cell_color <- if (!is.null(color) && !is.na(value)) {
      color[[value]] %||% "transparent"
    } else {
      "transparent"
    }
    
    shadow <- if (box_shadow) "0 6px 6px -4px #888888" else NULL
    has_details <- !is.na(details_text) && nchar(trimws(details_text)) > 0
    
    # Main wrapper
    htmltools::div(
      style = list(
        display = "flex",
        flexDirection = "column",
        width = "100%"
      ),
      
      # Main cell container
      htmltools::div(
        style = list(
          display = "grid",
          gridTemplateColumns = "25px 2fr auto",  # Added left padding column
          alignItems = "center",
          minHeight = height,
          backgroundColor = cell_color,
          borderRadius = "6px",
          boxShadow = shadow,
          padding = "8px 12px",
          color = text_color,
          fontWeight = font_weight
        ),
        
        # Empty div for left padding
        htmltools::div(),
        
        # Text content
        htmltools::div(
          style = list(
            display = "flex",
            justifyContent = "center",
            alignItems = "center",
            width = "100%",
            textAlign = "center"
          ),
          value
        ),
        
        # Arrow area
        if (has_details) {
          htmltools::div(
            style = list(
              display = "flex",
              alignItems = "center",
              paddingLeft = "8px"
            ),
            htmltools::tags$span(
              "â–¶",
              class = sprintf("expand-arrow-%s-%s", column_prefix, index - 1),
              style = list(
                cursor = "pointer",
                transform = "rotate(0deg)",
                transition = "transform 0.3s ease",
                color = "black",
                display = "flex",
                alignItems = "center"
              ),
              onclick = sprintf("toggleContent('%s', '%s')", column_prefix, index - 1)
            )
          )
        } else {
          # Empty div to maintain grid structure
          htmltools::div(
            style = list(
              width = "24px"
            )
          )
        }
      ),
      
      # Expandable content
      if (has_details) {
        htmltools::div(
          class = sprintf("details-content-%s-%s", column_prefix, index - 1),
          style = list(
            display = "none",
            marginTop = "4px",
            padding = "4px",
            backgroundColor = "#f8f9fa",
            borderRadius = "6px",
            boxShadow = shadow,
            textAlign = "center",
            whiteSpace = "pre-wrap",
            fontSize = "12px"
          ),
          details_text
        )
      }
    )
  }
}



# Popup cell function with info icon
popup_custom <- function(data, 
                         details_col, 
                         header = NULL,
                         color = NULL,
                         text_color = "black",
                         font_weight = "normal",
                         height = "30px",
                         box_shadow = TRUE,
                         line_height = 1.2) {
  
  if (!is.logical(box_shadow)) {
    stop("`box_shadow` must be TRUE or FALSE")
  }
  
  shadow <- if (box_shadow) "0 6px 6px -4px #888888" else NULL
  
  function(value, index) {
    use_colors <- !is.null(color) && length(color) > 0
    background_color <- if (use_colors) {
      if (!is.na(value) && value %in% names(color)) {
        color[[value]]
      } else {
        "#FFFFFF"  # Default color if value not found in color mapping
      }
    } else {
      "#FFFFFF"
    }
    
    details_text <- data[[details_col]][index]
    
    if (!is.null(header)) {
      current_row <- as.list(data[index, ])
      header_text <- eval(parse(text = header), envir = current_row)
    } else {
      header_text <- sprintf("Details for Row %d", index)
    }
    
    # Main div wrapping the content
    htmltools::tags$div(
      style = list(
        padding = "8px 12px",
        borderRadius = "6px",
        display = "flex",
        justifyContent = "space-between",  # Keep the text and icon separate
        alignItems = "center",            # Vertically align both text and icon
        height = height,
        backgroundColor = background_color,
        boxShadow = shadow,
        transition = "background 1s ease",
        lineHeight = as.character(line_height),
        position = "relative"
      ),
      # Centered text
      htmltools::tags$span(
        style = list(
          flexGrow = 1,                  # Allows text to occupy the remaining space
          textAlign = "center",          # Centers the text within its space
          color = text_color,
          fontWeight = font_weight
        ),
        value
      ),
      # "i" icon positioned to the right
      if (!is.na(details_text) && nchar(trimws(details_text)) > 0) {
        htmltools::tags$span(
          style = sprintf("cursor: pointer; color: %s;", text_color),
          onclick = sprintf(
            "showCustomModal('%s', `%s`)", 
            header_text,
            details_text
          ),
          htmltools::tags$i(
            style = sprintf("
              font-style: normal; 
              font-weight: bold; 
              border: 2px solid currentColor; 
              border-radius: 50%%; 
              width: 18px; 
              height: 18px; 
              display: inline-flex; 
              align-items: center; 
              justify-content: center; 
              font-size: 12px; 
              color: %s;", 
                            text_color),
            "i"
          )
        )
      }
    )
  }
}



# Updated JavaScript
custom_js <- HTML("
window.toggleContent = function(columnPrefix, index) {
  console.log(`toggleContent called with columnPrefix: ${columnPrefix}, index: ${index}`);
  const content = document.querySelector(`.details-content-${columnPrefix}-${index}`);
  const arrow = document.querySelector(`.expand-arrow-${columnPrefix}-${index}`);
  if (content && arrow) {
    const isVisible = content.style.display === 'block';
    content.style.display = isVisible ? 'none' : 'block';
    arrow.style.transform = isVisible ? 'rotate(0deg)' : 'rotate(90deg)';
  } else {
    console.error(`Elements not found for columnPrefix: ${columnPrefix}, index: ${index}`);
  }
};

window.showCustomModal = function(header, details) {
    if (typeof Swal !== 'undefined') {
      // Count the number of words in the details text
      const wordCount = details.split(' ').length;
      // Determine alignment: left-align for fewer words, justify for more words
      const textAlign = wordCount > 2 ? 'justify' : 'left';

      Swal.fire({
        title: header,
        html: `<div style='white-space: pre-line; text-align: ${textAlign};'>${details}</div>`,
        showCloseButton: true,
        showConfirmButton: true,
        confirmButtonText: 'Close',
        confirmButtonColor: '#00A1E3',
        customClass: {
          container: 'custom-swal-container',
          popup: 'custom-swal-popup',
          header: 'custom-swal-header',
          content: 'custom-swal-content'
        }
      });
    } else {
      console.error('SweetAlert2 (Swal) is not loaded.');
    }
  };
")

# CSS styling
custom_css <- HTML("
<style>
.custom-swal-popup {
  font-family: 'Open Sans', sans-serif;
}
.custom-swal-header {
  font-weight: 600;
}
.custom-swal-content {
  text-align: left;
}
.swal2-icon {
  display: none !important;
}
</style>
")
```


# Governance {data-orientation=rows}

```{r}
#| padding: 0
div(
    # Sorting hint above table, right-aligned
  div(
    "Hold Shift to sort by multiple columns",
    style = "color: #666; font-size: 0.875rem; margin-bottom: 0.5rem; text-align: right;"
  ),
  reactable(
  tab1_data %>% select(-`Ownership (detailed)`),
  defaultColDef = colDef(
    #width = 260,
    align = "center",  # Horizontal centering
    vAlign = "center", # Vertical centering
    style = list(
      verticalAlign = "middle"  # Additional vertical alignment
    ),
    headerStyle = list(
      verticalAlign = "middle",
      textAlign = "center"
    )
  ),
  columns = list(
    "Country" = colDef(
  width = 190,
  sticky = "left",
  header = "Country",
  align = "center",
  style = list(fontWeight = 700, position = "sticky", left = 0, zIndex = 1),
  headerStyle = list(position = "sticky", left = 0, zIndex = 1),
  cell = function(value, index) {
    current_country <- tab1_data$Country[index]
    flag_path <- file.path("images/flags", paste0(current_country, ".svg"))
    encoded_image <- knitr::image_uri(flag_path)
    
    div(
      style = list(
        display = "flex",
        alignItems = "center",
        gap = "8px",
        width = "100%",
        justifyContent = "flex-start",
        fontWeight = 700
      ),
      tags$img(
        src = encoded_image,
        alt = value,
        title = current_country,
        style = list(
          width = "32px",
          height = "24px",
          flexShrink = "0"
        )
      ),
      span(
        style = list(
          display = "inline-block",
                      fontWeight = 700  # Also add bold to the span element
        ),
        current_country
      )
    )
  }
),
TSO = colDef(
  width = 135,
  sticky = "left",
  align = "center",
  # Add more specific styling
  style = list(fontWeight = 700),
  cell = function(value, index) {
    url <- tab1_data$TSO_URL[index]
    div(
      style = list(
        paddingLeft = "0px",
        fontWeight = 700
      ),
      if (!is.na(url)) {
        # Make the link styling more specific
        htmltools::tags$a(
          href = url, 
          target = "_blank", 
          style = "font-weight: 700 !important;", # Added !important and changed to inline style
          value
        )
      } else {
        # For non-link values
        div(
          style = list(fontWeight = 700),
          value
        )
      }
    )
  }
),
      "State ownership share" = colDef(
      width = 200,  # Set fixed width for column to ensure consistent layout
      align = "right",  # aligning the whole cell content to the right
      style = list(paddingRight = "0px", paddingTop = "12px"),  # no padding on the right side
      
      # Popup content configuration
      details = function(index) {
        div(
          style = "padding: 1rem; background-color: #f8fafc; border-radius: 6px; margin: 0.5rem 0;",
          tab1_data$`Ownership (detailed)`[index]
        )
      },
      
      cell = function(value) {
        # Format percentage - show decimal only if non-zero decimal part exists
        formatted_value <- ifelse(
          value * 100 == round(value * 100),  # Check if value has decimal part
          sprintf("%d%%", round(value * 100)), # If no decimal, show integer
          sprintf("%.1f%%", value * 100)       # If decimal exists, show 1 decimal place
        )
        
        # Main container - sets relative positioning context
        div(style = list(
          position = "relative",
          height = "40px",
          marginTop = "-29px"  # Adjust vertical alignment of entire cell content
        ),
        
        # Container for bar and percentage - handles positioning
        div(style = list(
          position = "absolute",
          left = "29px", #move bar container to the right with increasing value
          top = "50%",
          transform = "translateY(-50%)",  # Center vertically
          display = "flex",
          alignItems = "center",
          width = "160px",
          gap = "8px"  # Space between bar and percentage text
        ),
        
        # Background bar container
        div(style = list(
          background = "#e2e8f0",  # Light gray background
          width = "90px",          # Fixed width of bar
          height = "1.2rem",
          borderRadius = "6px",
          overflow = "hidden"      # Ensure bar stays within container
        ),
        
        # Filled portion of bar
        div(style = list(
          background = "#00A1E3",  # Blue fill color
          width = paste0(value * 100, "%"),  # Width based on percentage
          height = "100%"
        ))
        ),
        span(formatted_value)  # Display formatted percentage value
        ))
      }
    ),
"Unbundling model" = colDef(
  cell = color_tiles_custom(tab1_data, color_ref = "unbundling_cols", height = "50px", line_height = 1.1,
                            box_shadow = TRUE),
  width = 220
#   footer = htmltools::div(
#     htmltools::div(tab1_foot$`Unbundling model`[1]),
#     htmltools::div(tab1_foot$`Unbundling model`[2])
#   ),
#   footerStyle = list(
#     fontSize = "0.75rem", 
#     textAlign = "left"
#   )
 ),
    "Government net zero climate target" = colDef(
      cell = color_tiles_custom(
        tab1_data, 
        color_ref = "netZero_cols", 
        height = "50px",
        box_shadow = TRUE
      ), 
      width = 170),
    "Public reference to climate responsibility - regulator" = colDef(
      width = 350),
    "Public reference to climate responsibility - TSO" = colDef(
      width = 270),
    
    TSO_URL = colDef(show = FALSE),
    row_id = colDef(show = FALSE),
    unbundling_cols = colDef(show = FALSE),
    netZero_cols = colDef(show = FALSE)),
  onClick = "expand",
  theme = reactableTheme(
    borderColor = "#dfe2e5",
    stripedColor = "#f6f8fa",
    highlightColor = "#f0f5f9",
    cellPadding = "4px 6px",
    style = list(
      fontFamily = "'Open Sans', sans-serif"
    ),
    borderWidth = "1px 0",
    headerStyle = list(
      backgroundColor ="#00A1E3",  # Matching your bar chart color
      color = "white",
      fontWeight = 600,
      borderBottom = "2px solid #dfe2e5",
      minHeight = "50px"
    )
  ),
  pagination = FALSE
),
  
  # Footnotes container - starts from Unbundling model column
  div(
    style = "font-size: 0.75rem; color: #666; margin-top: 0.5rem;",  
    div(tab1_foot$`Unbundling model`[1]),
    div(tab1_foot$`Unbundling model`[2])
  )
)
```


# Politics {data-orientation=rows}

```{r}
#| padding: 0
reactPolitics <- reactable(tab2_data,
    defaultColDef = colDef(
   # width = 260,
    align = "center",  # Horizontal centering
    vAlign = "center", # Vertical centering
    style = list(
      verticalAlign = "middle"  # Additional vertical alignment
    ),
    headerStyle = list(
      verticalAlign = "middle",
      textAlign = "center"
    ),
  ),
  columnGroups = list(
  # colGroup(
  #   name = " ",
  #   sticky = "left",
  #   columns = c("Country", "TSO"),
  #   headerStyle = list(
  #     width = "325px"  ## Combined width of Country (190) + TSO (135)
  #   )
  # ),
        colGroup(
      name = "Positions held in ENTSO-E",
      columns = c("Board member or head of Assembly",	"Committee chair"),
      headerStyle = list(
        background = "#00A1E3",
        color = "white",
        borderBottom = "1px solid #dfe2e5"
      )
    ),
    colGroup(
      name = "Global progressive TSO coalition member",
      columns = c("Green Grids Initiative (GGI)", 
                  "Global Power System Transformation Consortium (G-PST)",
                  "Breakthrough Agenda Power (P4 infrastructure, knowledge, capacity & skills)",
                 "International Smart Grid Action Network (ISGAN)", 
                 "Regulatory Energy Transition Accelerator (RETA)",
                 "Clean Energy Ministerial"
                 ),
      headerStyle = list(
        background = "#00A1E3",
        color = "white",
        borderBottom = "1px solid #dfe2e5"
      )
    ) #,
    #     colGroup(
    #   name = "governmentrelated",
    #   columns = c("Regulatory Energy Transition Accelerator (RETA)",
    #   "Breakthrough Agenda Power (P4 infrastructure, knowledge, capacity & skills)",
    #   "Clean Energy Ministerial"),
    #   headerStyle = list(
    #     background = "#00A1E3",
    #     color = "white",
    #     borderBottom = "1px solid #dfe2e5"
    #   )
    # )
  ),
  columns = list(
"Country" = colDef(
  width = 190,
  sticky = "left",
  header = "Country",
  align = "center",
  ,
  style = list(
    fontWeight = 700),
  cell = function(value, index) {
    current_country <- tab2_data$Country[index]
    flag_path <- file.path("images/flags", paste0(current_country, ".svg"))
    encoded_image <- knitr::image_uri(flag_path)
    
    div(
      style = list(
        display = "flex",
        alignItems = "center",
        gap = "8px",
        width = "100%",
        justifyContent = "flex-start",
        fontWeight = 700
      ),
      tags$img(
        src = encoded_image,
        alt = value,
        title = current_country,
        style = list(
          width = "32px",
          height = "24px",
          flexShrink = "0"
        )
      ),
      span(
        style = list(
          display = "inline-block",
          fontWeight = 700
        ),
        current_country
      )
    )
  }
),
TSO = colDef(
  width = 135,
  sticky = "left",
  align = "center",
  # Add more specific styling
  style = list(fontWeight = 700),
  cell = function(value, index) {
    url <- tab2_data$TSO_URL[index]
    div(
      style = list(
        paddingLeft = "0px",
        fontWeight = 700
      ),
      if (!is.na(url)) {
        # Make the link styling more specific
        htmltools::tags$a(
          href = url, 
          target = "_blank", 
          style = "font-weight: 700 !important;", # Added !important and changed to inline style
          value
        )
      } else {
        # For non-link values
        div(
          style = list(fontWeight = 700),
          value
        )
      }
    )
  }
),
    "Share of renewables (2023)" = colDef(
  width = 200,  # Set fixed width for column
  align = "right",  # aligning the whole cell content to the right
  style = list(paddingRight = "0px"),  # no padding on the right side
  
  cell = function(value) {
    if (is.na(value)) return(NA)
    
    # Format percentage with one decimal place
    formatted_value <- paste0(format(as.numeric(value), nsmall = 1), "%")
    
    # Main container - sets relative positioning context
    div(style = list(
      position = "relative",
      height = "40px"    ),
    
    # Container for bar and percentage - handles positioning
    div(style = list(
      position = "absolute",
      left = "30px", #move bar container to the right with increasing value
      top = "50%",
      transform = "translateY(-50%)",  # Center vertically
      display = "flex",
      alignItems = "center",
      width = "160px",
      gap = "8px"  # Space between bar and percentage text
    ),
    
    # Background bar container
    div(style = list(
      background = "#e2e8f0",  # Light gray background
      width = "90px",          # Fixed width of bar
      height = "1.2rem",
      borderRadius = "6px",
      overflow = "hidden"      # Ensure bar stays within container
    ),
    
    # Filled portion of bar
    div(style = list(
      background = "#00A1E3",  # Blue fill color
      width = paste0(value, "%"),  # Width based on percentage
      height = "100%"
    ))
    ),
    span(formatted_value)  # Display formatted percentage value
    ))
  }
),
   "Board member or head of Assembly" = colDef(
      cell = expand_custom(
        data = tab2_data,
        details_col = "Board_Details",
        box_shadow = FALSE,
        text_color = "black",
        column_id = "board"  # Unique column ID
      ),
      html = TRUE, width = 130
    ),
    Board_Details = colDef(show = FALSE),
    "Committee chair" = colDef(
      cell = expand_custom(
        data = tab2_data,
        details_col = "Chair_Details",
        box_shadow = FALSE,
        text_color = "black",
        column_id = "committee"  # Unique column ID
      ),
      html = TRUE, width = 130
    ),
    Chair_Details = colDef(show = FALSE),

"Government aligned with 2035 benchmark" = colDef(
  cell = color_tiles_custom(tab2_data, color_ref = "benchmark_cols", height = "40px", box_shadow = TRUE),
  width = 250, 
),

    "Position on capacity remuneration markets" = colDef(
      cell = popup_custom(
        data = tab2_data,
        details_col = "crm_detail",
        header = "paste(TSO, ' | Position on CRM: ', `Position on capacity remuneration markets`)",
        color = crm_cols,
        text_color = "black",
        font_weight = "400",
        height = "40px",
        box_shadow = TRUE,
        line_height = 1.2
      ),
      html = TRUE,
      width = 170
    ),

"Clean Energy Ministerial" = colDef(
  cell = color_tiles_custom(tab2_data, color_ref = "cem_cols", height = "40px", box_shadow = TRUE),
  width = 150,
    headerStyle = list(fontSize = "11px")  # Adjust size as needed
),
"Green Grids Initiative (GGI)" = colDef(
  cell = color_tiles_custom(tab2_data, yes_no = TRUE, height = "40px", box_shadow = TRUE),
  width = 130,
    headerStyle = list(fontSize = "11px")  # Adjust size as needed
),
"International Smart Grid Action Network (ISGAN)" = colDef(
  cell = color_tiles_custom(tab2_data, yes_no = TRUE, height = "40px", box_shadow = TRUE),
  width = 130,  headerStyle = list(fontSize = "11px")  # Adjust size as needed
),
"Global Power System Transformation Consortium (G-PST)" = colDef(
   header = htmltools::div(
    "Global Power System Transformation Consortium",
    htmltools::tags$br(),
    "(G-PST)"
  ),
  cell = color_tiles_custom(tab2_data, yes_no = TRUE, height = "40px", box_shadow = TRUE),
  width = 130,  headerStyle = list(fontSize = "11px")  # Adjust size as needed
),
"Regulatory Energy Transition Accelerator (RETA)" = colDef(
  cell = color_tiles_custom(tab2_data, yes_no = TRUE, height = "40px", box_shadow = TRUE),
  width = 130,  headerStyle = list(fontSize = "11px")  # Adjust size as needed
),
"Breakthrough Agenda Power (P4 infrastructure, knowledge, capacity & skills)" = colDef(
  cell = color_tiles_custom(tab2_data, yes_no = TRUE, height = "40px", box_shadow = TRUE),
  width = 130,  headerStyle = list(fontSize = "11px")  # Adjust size as needed
),
    "TSO_URL" = colDef(show = FALSE),
"benchmark_cols" = colDef(show = FALSE),
"crm_cols" = colDef(show = FALSE),
"cem_cols" = colDef(show = FALSE),
"crm_detail" = colDef(show = FALSE),
    "row_id" = colDef(show = FALSE)
  ),
theme = reactableTheme(
  borderColor = "#dfe2e5",
  stripedColor = "#f6f8fa",
  highlightColor = "#f0f5f9",
  cellPadding = "4px 6px",
  style = list(
    fontFamily = "'Open Sans', sans-serif"
  ),
  borderWidth = "1px 0",
  headerStyle = list(
    backgroundColor ="#00A1E3",  # Matching your bar chart color
    color = "white",
    fontWeight = 600,
    minHeight = "50px"
  )
),
  pagination = FALSE
)

# Wrapper for the table with sorting hint and custom functionality
div_wrapper <- div(
  # Sorting hint above the table
  div(
    "Hold Shift to sort by multiple columns",
    style = "color: #666; font-size: 0.875rem; margin-bottom: 0.5rem; text-align: right;"
  ),
  # Render the reactPolitics table
  reactPolitics
)

browsable(
  tagList(
    # Load SweetAlert2
    tags$script(src = "https://cdn.jsdelivr.net/npm/sweetalert2@11"),
    # Include the reusable JavaScript
    tags$script(custom_js),
    # Include the sorting hint and the table
    div(
      # Sorting hint above the table
      div(
        "Hold Shift to sort by multiple columns",
        style = "color: #666; font-size: 0.875rem; margin-bottom: 0.5rem; text-align: right;"
      ),
      # Render the reactPolitics table
      reactPolitics
    )
  )
)

```